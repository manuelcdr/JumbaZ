type Chamada {
  data: String!,
  presentes: [ID!]!,
  ausentes: [ID!]!
}

type Aluno {
  nome: String!,
  apelido: String,
  email: String
}

type Turma {
  id: ID!,
  usuarioId: ID!,
  nome: String!,
  detalhes: String,
  alunos: [Aluno!]!,
  chamadas: [Chamada!]!
}

type Usuario {
  id: ID!,
  nome: String!,
  email: String!,
  turmas: [Turma!]!
}

# union GenericObject = Aluno | Usuario

# generic Generic<T>  {
#   modelName: String!,
#   objeto: T
# }

# type GenericType {
#   data: Generic
# }

type Query {
  usuarios: [Usuario!]!,
  usuario(id: ID!): Usuario,
  
  turmas(usuarioId: ID!): [Turma!]!,
  turma(id: ID!): Turma,

  chamadas(turmaId: ID!): [Chamada!]!,
  alunos(turmaId: ID!): [Aluno!]!,
  aluno(id: ID!): Aluno

}

type Mutation {
  criarUsuario(nome: String!, email: String!): Usuario,

  criarTurma(usuarioId: ID!, nome: String!, detalhes: String): Turma,
  atualizarTurma(id: ID!, nome: String, detalhes: String): Turma,
  
  criarChamada(turmaId: ID!, data: String!, presentes: [ID!]!, ausentes: [ID!]!): Chamada,
  atualizarChamada(id: ID!, data: String, presentes: [ID!]!, ausentes: [ID!]!): Chamada,

  criarAluno(turmaId: ID!, nome: Sting!, apelido: String, email: String): Aluno,
  atualizarAluno(id: ID!, nome: Sting, apelido: String, email: String): Aluno
}